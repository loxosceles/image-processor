#!/usr/bin/env bash

# Global variables
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/commands.sh"

# Created by argbash-init v2.11.0
# ARG_OPTIONAL_SINGLE([isession])
# ARG_POSITIONAL_SINGLE([command])
# ARG_LEFTOVERS([args])
# ARG_DEFAULTS_POS()
# ARG_HELP([Development management script for image processor])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.11.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.dev for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_command=
_arg_leftovers=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_isession=


print_help()
{
	printf '%s\n' "Development management script for image processor"
	printf 'Usage: %s [--isession <arg>] [-h|--help] <command> ... \n' "$0"
	printf '\t%s\n' "... : args"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	local _key
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--isession)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_isession="$2"
				shift
				;;
			--isession=*)
				_arg_isession="${_key##--isession=}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'command'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_command "
	_our_args=$((${#_positionals[@]} - 1))
	for ((ii = 0; ii < _our_args; ii++))
	do
		_positional_names="$_positional_names _arg_leftovers[$((ii + 0))]"
	done

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# Command routing with uniform handling
case "$_arg_command" in
    "build")
        cmd_build_and_push
        ;;
    "dev")
        if [ "$_arg_isession" ]; then
            cmd_isession
        else
            echo "Error: dev command requires --isession flag"
            exit 1
        fi
        ;;
    "test")
        cmd_run_tests
        ;;
    "image_processor")
        cmd_run_image_processor "${_arg_leftovers[@]}"
        ;;
    "package")
        cmd_build_package
        ;;
    *)
        echo "Error: Unknown command '$_arg_command'"
        echo "Available commands: build, dev, test, image_processor, package"
        exit 1
        ;;
esac

# ] <-- needed because of Argbash
